{\rtf1\ansi\ansicpg1251\cocoartf1265
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red163\green21\blue21;}
{\info
{\title \'d3\'f7\'e5\'e1\'ed\'e0\'ff \'e4\'e8\'f1\'f6\'e8\'ef\'eb\'e8\'ed\'e0  "\'cf\'c0\'d0\'c0\'cb\'cb\'c5\'cb\'dc\'cd\'db\'c5 \'c2\'db\'d7\'c8\'d1\'cb\'c5\'cd\'c8\'df"}
{\author Polyakov}
{\*\company  }}\paperw11900\paperh16840\margl567\margr567\margb567\margt567\vieww15620\viewh16600\viewkind1\viewscale125
\deftab720
\pard\pardeftab720\ri-6\qc

\f0\b\fs22 \cf0 \uc0\u1057 \u1077 \u1084 \u1080 \u1085 \u1072 \u1088  1. \u1057 \u1090 \u1072 \u1085 \u1076 \u1072 \u1088 \u1090  MPI. \u1041 \u1072 \u1079 \u1086 \u1074 \u1099 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080 .\
\pard\pardeftab720\ri-6\sb120
\cf0  \uc0\u1041 \u1072 \u1079 \u1086 \u1074 \u1099 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080  MPI.\
\pard\pardeftab720\ri-6\qj

\b0 \cf0 1) \uc0\u1048 \u1085 \u1080 \u1094 \u1080 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1103  \u1080  \u1087 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1099  \u1089 \u1088 \u1077 \u1076 \u1099  (MPI_Init, MPI_Initialized, MPI_Comm_size, MPI_Comm_rank, MPI_Get_processor_name, MPI_Finalize, MPI_Abort, MPI_Wtick, MPI_Wtime);\
2) \uc0\u1057 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1085 \u1099 \u1077  \u1086 \u1073 \u1084 \u1077 \u1085 \u1099  \u1090 \u1080 \u1087 \u1072  \u1090 \u1086 \u1095 \u1082 \u1072 -\u1090 \u1086 \u1095 \u1082 \u1072  (\u1089 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1085 \u1099 \u1077  \u1080  \u1072 \u1089 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1085 \u1099 \u1077 ) (MPI_Send, MPI_Recv, MPI_Sendrecv);\
3) \uc0\u1055 \u1088 \u1086 \u1094 \u1077 \u1076 \u1091 \u1088 \u1099  \u1089 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1080 \u1079 \u1072 \u1094 \u1080 \u1080  (MPI_Barrier).\
\
\pard\pardeftab720\ri-6\sb60\sa60

\f1\b\fs20 \cf0 \uc0\u1055 \u1088 \u1080 \u1084 \u1077 \u1088  1 \'96 \u1087 \u1088 \u1086 \u1089 \u1090 \u1077 \u1081 \u1096 \u1072 \u1103  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1072  \u1085 \u1072  MPI (ex06a.c).\
\pard\pardeftab720\ri-6
\cf0 #include <stdio.h> #include "mpi.h"\
int main(int argc, char *argv[])\
\{\
  int i, ii, np, mp, nl; char pname[MPI_MAX_PROCESSOR_NAME];\
  int nc=10000; double t0, t1, a;\
  MPI_Initialized(&ii); fprintf(stderr,"Before MPI_Init ii=%d\\n",ii);\
  MPI_Init(&argc,&argv);\
  MPI_Comm_size(MPI_COMM_WORLD,&np);\
  MPI_Comm_rank(MPI_COMM_WORLD,&mp);\
  MPI_Get_processor_name(pname,&nl);\
  t0 = MPI_Wtick();\
  MPI_Initialized(&ii); fprintf(stderr,"Between MPI_Init & MPI_Finalize ii=%d\\n",ii);\
  fprintf(stderr,"Netsize: %d, process: %d, system: %s, tick=%12le\\n",np,mp,pname,t0);\
  t1 = MPI_Wtime();\
  a = 0;\
  for (i=0; i<nc; i++) \{a = a + 1.23*i; if (a>1000) a = a / 1000;\}\
  t1 = MPI_Wtime()-t1;\
  fprintf(stderr,"mp=%d, time=%12le res=%12le\\n",mp,t1,a);\
  MPI_Finalize();\
  MPI_Initialized(&ii); fprintf(stderr,"After MPI_Finalize ii=%d\\n",ii);\
  return 0;\
\}\
\uc0\u1058 \u1088 \u1072 \u1085 \u1089 \u1083 \u1103 \u1094 \u1080 \u1103 :\
>mpicc -o ex06a.px -O2 -lm ex06a.c\
>mpirun -np 1 -nolocal -machinefile hosts ex06a.px\
Before MPI_Init ii=0\
Between MPI_Init & MPI_Finalize ii=1\
Netsize: 1, process: 0, system: cl73.limm, tick=1.000000e-06\
mp=0, time=2.460000e-04 res=1.231108e+01\
After MPI_Finalize ii=1\
>mpirun -np 2 -nolocal -machinefile hosts ex06a.px\
Before MPI_Init ii=0\
Before MPI_Init ii=0\
Between MPI_Init & MPI_Finalize ii=1\
Netsize: 4, process: 0, system: cl73.limm, tick=1.000000e-06\
Between MPI_Init & MPI_Finalize ii=1\
Netsize: 4, process: 1, system: cl74.limm, tick=1.000000e-06\
mp=0, time=2.450000e-04 res=1.231108e+01\
mp=1, time=2.610000e-04 res=1.231108e+01\
After MPI_Finalize ii=1\
After MPI_Finalize ii=1\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\ri-6\sb60\sa60
\cf0 \uc0\u1055 \u1088 \u1080 \u1084 \u1077 \u1088  2 \'96 \u1044 \u1074 \u1091 \u1085 \u1072 \u1087 \u1088 \u1072 \u1074 \u1083 \u1077 \u1085 \u1085 \u1099 \u1081  \u1089 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1085 \u1099 \u1081  \u1086 \u1073 \u1084 \u1077 \u1085  \u1089  \u1089 \u1086 \u1089 \u1077 \u1076 \u1103 \u1084 \u1080  \u1074  \u1083 \u1080 \u1085 \u1077 \u1081 \u1085 \u1086 \u1081  \u1090 \u1086 \u1087 \u1086 \u1083 \u1086 \u1075 \u1080 \u1080  (ex06b.c).\
\pard\pardeftab720\ri-6
\cf0 #include <stdio.h> #include <unistd.h> #include "mpi.h"\
int main(int argc, char *argv[])\
\{\
  int i, np, mp, nl; char pname[MPI_MAX_PROCESSOR_NAME]; MPI_Status status;\
  double t0, a1, a2, a3;\
  MPI_Init(&argc,&argv);\
  MPI_Comm_size(MPI_COMM_WORLD,&np);\
  MPI_Comm_rank(MPI_COMM_WORLD,&mp);\
  MPI_Get_processor_name(pname,&nl);\
  t0 = MPI_Wtick();\
  fprintf(stderr,"Netsize: %d, process: %d, system: %s, tick=%12le\\n",np,mp,pname,t0);\
  a1 = -1; a2 = mp * 3.14; a3 = -1;\
  if (np>1)\{\
    sleep(1);\
    if (mp%2==0)\{\
      if (mp+1<np)\{\
        MPI_Sendrecv(&a2,1,MPI_DOUBLE,mp+1,0,\
                     &a3,1,MPI_DOUBLE,mp+1,0,\
                     MPI_COMM_WORLD,&status);\
        fprintf(stderr,"%02d <-> %02d\\n",mp,mp+1);\
      \}\
      if (mp>0)\{\
        MPI_Sendrecv(&a2,1,MPI_DOUBLE,mp-1,0,\
                     &a1,1,MPI_DOUBLE,mp-1,0,\
                     MPI_COMM_WORLD,&status);\
        fprintf(stderr,"%02d <-> %02d\\n",mp,mp-1);\
      \}\
    \}\
    if (mp%2==1)\{\
      if (mp>0)\{\
        MPI_Sendrecv(&a2,1,MPI_DOUBLE,mp-1,0,\
                     &a1,1,MPI_DOUBLE,mp-1,0,\
                     MPI_COMM_WORLD,&status);\
        fprintf(stderr,"%02d <-> %02d\\n",mp,mp-1);\
      \}\
      if (mp+1<np)\{\
        MPI_Sendrecv(&a2,1,MPI_DOUBLE,mp+1,0,\
                     &a3,1,MPI_DOUBLE,mp+1,0,\
                     MPI_COMM_WORLD,&status);\
        fprintf(stderr,"%02d <-> %02d\\n",mp,mp+1);\
      \}\
    \}\
    sleep(1);\
  \}\
  fprintf(stderr,"mp=%d a1=%le a2=%le a3=%le\\n",mp,a1,a2,a3);\
  MPI_Finalize();\
  return 0;\
\}\
\uc0\u1058 \u1088 \u1072 \u1085 \u1089 \u1083 \u1103 \u1094 \u1080 \u1103 :\
>mpicc -o ex06b.px -O2 -lm ex06b.c\
\uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \u1099  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099 :\
>mpirun -np 1 -nolocal -machinefile hosts ex06b.px\
Netsize: 1, process: 0, system: cl73.limm, tick=1.000000e-06\
mp=0 a1=-1.000000e+00 a2=0.000000e+00 a3=-1.000000e+00\
>mpirun -np 2 -nolocal -machinefile hosts ex06b.px\
Netsize: 2, process: 0, system: cl73.limm, tick=1.000000e-06\
Netsize: 2, process: 1, system: cl74.limm, tick=1.000000e-06\
00 <-> 01\
01 <-> 00\
mp=0 a1=-1.000000e+00 a2=0.000000e+00 a3=3.140000e+00\
mp=1 a1=0.000000e+00 a2=3.140000e+00 a3=-1.000000e+00\
>mpirun -np 3 -nolocal -machinefile hosts ex06b.px\
Netsize: 3, process: 0, system: cl73.limm, tick=1.000000e-06\
Netsize: 3, process: 1, system: cl74.limm, tick=1.000000e-06\
Netsize: 3, process: 2, system: cl78.limm, tick=1.000000e-06\
00 <-> 01\
01 <-> 00\
01 <-> 02\
02 <-> 01\
mp=0 a1=-1.000000e+00 a2=0.000000e+00 a3=3.140000e+00\
mp=1 a1=0.000000e+00 a2=3.140000e+00 a3=6.280000e+00\
mp=2 a1=3.140000e+00 a2=6.280000e+00 a3=-1.000000e+00\
>mpirun -np 4 -nolocal -machinefile hosts ex06b.px\
00 <-> 01\
01 <-> 00\
02 <-> 03\
01 <-> 02\
03 <-> 02\
02 <-> 01\
mp=2 a1=3.140000e+00 a2=6.280000e+00 a3=9.420000e+00\
mp=0 a1=-1.000000e+00 a2=0.000000e+00 a3=3.140000e+00\
mp=1 a1=0.000000e+00 a2=3.140000e+00 a3=6.280000e+00\
mp=3 a1=6.280000e+00 a2=9.420000e+00 a3=-1.000000e+00\
\
\
\
\uc0\u1055 \u1088 \u1080 \u1084 \u1077 \u1088  3 \'96 \u1054 \u1076 \u1085 \u1086 \u1085 \u1072 \u1087 \u1088 \u1072 \u1074 \u1083 \u1077 \u1085 \u1085 \u1099 \u1081  \u1089 \u1080 \u1085 \u1093 \u1088 \u1086 \u1085 \u1085 \u1099 \u1081  \u1086 \u1073 \u1084 \u1077 \u1085  \u1074  \u1090 \u1086 \u1087 \u1086 \u1083 \u1086 \u1075 \u1080 \u1080  \u1082 \u1086 \u1083 \u1100 \u1094 \u1086  (ex06c.c).\
#include <stdio.h> #include <unistd.h> #include "mpi.h"\
#define MY_TAG 333\
int main(int argc, char *argv[])\
\{\
  int np, mp, nl; char pname[MPI_MAX_PROCESSOR_NAME]; MPI_Status status;\
  double t0, t1, a;\
  MPI_Init(&argc,&argv);\
  MPI_Comm_size(MPI_COMM_WORLD,&np);\
  MPI_Comm_rank(MPI_COMM_WORLD,&mp);\
  MPI_Get_processor_name(pname,&nl);\
  t0 = MPI_Wtick();\
  fprintf(stderr,"Netsize: %d, process: %d, system: %s, tick=%12le\\n",np,mp,pname,t0);\
  if (np<2) \{ fprintf(stderr,"Too small network\\n"); MPI_Finalize(); return 0; \}\
  sleep(1);\
  t1 = MPI_Wtime();\
  a = 0;\
  if (mp==0) \{\
    a = a + 1.0;\
    MPI_Send(&a, 1, MPI_DOUBLE, mp+1, MY_TAG, MPI_COMM_WORLD);\
    MPI_Recv(&a, 1, MPI_DOUBLE, np-1, MY_TAG, MPI_COMM_WORLD, &status);\
  \}\
  else \{\
    MPI_Recv(&a, 1, MPI_DOUBLE, mp-1, MY_TAG, MPI_COMM_WORLD, &status);\
    a = a + 1.0;\
    MPI_Send(&a, 1, MPI_DOUBLE, (mp+1) % np, MY_TAG, MPI_COMM_WORLD);\
  \}\
  t1 = MPI_Wtime()-t1;\
  sleep(1);\
  fprintf(stderr,"mp=%d time=%12le res=%12le\\n",mp,t1,a);\
  MPI_Finalize(); return 0;\
\}\
\uc0\u1058 \u1088 \u1072 \u1085 \u1089 \u1083 \u1103 \u1094 \u1080 \u1103 : >mpicc -o ex06c.px -O2 -lm ex06c.c\
\uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \u1099  \u1074 \u1099 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1080 \u1103 :\
>mpirun -np 1 -nolocal -machinefile hosts ex06c.px\
Too small network\
>mpirun -np 2 -nolocal -machinefile hosts ex06c.px\
mp=0 time=3.210000e-04 res=2.000000e+00\
mp=1 time=2.170000e-04 res=2.000000e+00\
>mpirun -np 3 -nolocal -machinefile hosts ex06c.px\
mp=2 time=1.213900e-02 res=3.000000e+00\
mp=1 time=5.149000e-03 res=2.000000e+00\
mp=0 time=4.609000e-03 res=3.000000e+00\
>mpirun -np 4 -nolocal -machinefile hosts ex06c.px\
mp=1 time=9.090000e-04 res=2.000000e+00\
mp=2 time=9.127000e-03 res=3.000000e+00\
mp=0 time=7.405000e-03 res=4.000000e+00\
mp=3 time=6.542000e-03 res=4.000000e+00\
\
\uc0\u1055 \u1088 \u1080 \u1084 \u1077 \u1088  4 \'96 \u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1077 \u1085 \u1080 \u1077  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083 \u1072 . \u1057 \u1073 \u1086 \u1088 \u1082 \u1072  \u1089 \u1091 \u1084 \u1084 \u1099  \u1085 \u1072  \u1085 \u1091 \u1083 \u1077 \u1074 \u1086 \u1084  \u1087 \u1088 \u1086 \u1094 \u1077 \u1089 \u1089 \u1086 \u1088 \u1077  (ex07a.c).\
#include <stdio.h> #include <math.h> #include \'93mycom.h\'94 #include "mynet.h"\
static int np, mp, nl; static char pname[MPI_MAX_PROCESSOR_NAME];\
static MPI_Status status; static double tick, t1, t2, t3;\
static double a = 0; static double b = 1;\
static int ni = 1000000000; static double sum = 0;\
double f1(double x); double f1(double x) \{ return 4.0/(1.0+x*x);\}\
double myjob(int mp); double myjob(int mp)\
\{\
  int n1; double a1, b1, h1, s1;\
  h1 = (b - a) / np; n1 = ni / np;\
  a1 = a + h1 * mp; if (mp<np-1) b1 = a1 + h1; else b1 = b;\
  s1 = integrate(f1,a1,b1,n1);\
  return s1;\
\}\
int main(int argc, char *argv[])\
\{\
  MyNetInit(&argc,&argv,&np,&mp,&nl,pname,&tick);\
  if (np<2) \{\
    t1 = MPI_Wtime(); sum = integrate(f1,a,b,ni); t2 = MPI_Wtime(); t3 = t2;\
  \}\
  else \{\
    int i; double p;\
    t1 = MPI_Wtime(); sum = myjob(mp); t2 = MPI_Wtime();\
    if (mp==0)\
      for (i=1; i<np; i++) \{\
        MPI_Recv(&p, 1, MPI_DOUBLE, i, MY_TAG, MPI_COMM_WORLD, &status);\
        sum = sum + p;\
      \}\
    else\
      MPI_Send(&sum, 1, MPI_DOUBLE, 0, MY_TAG, MPI_COMM_WORLD);\
    MPI_Barrier(MPI_COMM_WORLD);\
    t3 = MPI_Wtime();\
  \}\
  t1 = t2 - t1; t2 = t3 - t2; t3 = t1 + t2;\
  fprintf(stderr,"mp=%d t1=%lf t2=%lf t3=%lf int=%22.15le\\n",mp,t1,t2,t3,sum);\
  MPI_Finalize();\
  return 0;\
\}\
\uc0\u1058 \u1088 \u1072 \u1085 \u1089 \u1083 \u1103 \u1094 \u1080 \u1103 :\
>mpicc -o ex07a.px -O2 -lm -static ex07a.c mycom.c mynet.c\
\uc0\u1056 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \u1099  \u1074 \u1099 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1080 \u1103 :\
>mpirun -np 1 -nolocal -machinefile hosts ex07a.px\
mp=0 t1=17.624254 t2=0.000000 t3=17.624254 int= 3.141592651591870e+00\
>mpirun -np 2 -nolocal -machinefile hosts ex07a.px\
mp=0 t1=8.713395 t2=5.357119 t3=14.070514 int= 3.141592648390306e+00\
mp=1 t1=14.068855 t2=0.000404 t3=14.069259 int= 1.287002215586667e+00\
>mpirun -np 4 -nolocal -machinefile hosts ex07a.px\
mp=0 t1=4.358262 t2=0.028721 t3=4.386983 int= 3.141592642065422e+00\
mp=1 t1=4.366067 t2=0.020719 t3=4.386786 int= 8.746757802958527e-01\
mp=2 t1=4.360264 t2=0.025230 t3=4.385494 int= 7.194139966100185e-01\
mp=3 t1=4.384680 t2=0.000514 t3=4.385194 int= 5.675882164165912e-01\
>mpirun -np 8 -nolocal -machinefile hosts ex07a.px\
mp=0 t1=2.179436 t2=1.423302 t3=3.602738 int= 3.141592629478097e+00\
mp=2 t1=2.194378 t2=1.408253 t3=3.602631 int= 4.551680250680343e-01\
mp=4 t1=3.600436 t2=0.000350 t3=3.600786 int= 3.798068224947328e-01\
mp=3 t1=2.192403 t2=1.410172 t3=3.602575 int= 4.195077517209749e-01\
mp=6 t1=2.190496 t2=1.410177 t3=3.600673 int= 3.013155610478502e-01\
mp=7 t1=2.200823 t2=1.399654 t3=3.600477 int= 2.662726531032736e-01\
mp=1 t1=2.182648 t2=1.424412 t3=3.607060 int= 4.824946705556977e-01\
mp=5 t1=2.187454 t2=1.418299 t3=3.605753 int= 3.396071712388637e-01\
\
\uc0\u1047 \u1072 \u1076 \u1072 \u1085 \u1080 \u1077  1. \u1057 \u1076 \u1077 \u1083 \u1072 \u1090 \u1100  \u1089 \u1091 \u1084 \u1084 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1084  \u1089 \u1076 \u1074 \u1072 \u1080 \u1074 \u1072 \u1085 \u1080 \u1103 .\
\
\uc0\u1047 \u1072 \u1076 \u1072 \u1085 \u1080 \u1077  2. \u1053 \u1072 \u1087 \u1080 \u1089 \u1072 \u1090 \u1100  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1091  \u1080  \u1074 \u1099 \u1095 \u1080 \u1089 \u1083 \u1080 \u1090 \u1100  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083  I=
\f0\b0  
\f1\b .\
\
\pard\pardeftab720\ri-6

\f2\b0 \cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
int\cf0  MyNetInit(\cf2 int\cf0 * argc, \cf2 char\cf0 *** argv, \cf2 int\cf0 * np, \cf2 int\cf0 * mp,\
              \cf2 int\cf0 * nl, \cf2 char\cf0 * pname, \cf2 double\cf0 * tick)\
\{\
  \cf2 int\cf0  i;\
\
  i = MPI_Init(argc,argv);\
  \cf2 if\cf0  (i != 0)\{\
    fprintf(stderr,\cf3 "MPI initialization error"\cf0 );\
    exit(i);\
  \}\
\
  MPI_Comm_size(MPI_COMM_WORLD,np);\
  MPI_Comm_rank(MPI_COMM_WORLD,mp);\
  MPI_Get_processor_name(pname,nl);\
\
  *tick = MPI_Wtick();\
\
  sleep(1);\
\
  \cf2 return\cf0  0;\
\}\
\
\cf2 double\cf0  integrate(\cf2 double\cf0  f(\cf2 double\cf0  x), \cf2 double\cf0  a, \cf2 double\cf0  b, \cf2 int\cf0  n)\
\{\
  \cf2 int\cf0  i; \cf2 double\cf0  h, s;\
\
  h = (b - a) / n;\
  s = 0.5 * f(a);\
  \cf2 for\cf0  (i=1; i<n-1; i++)\
    s = s + f(a+h*i);\
  s = s + 0.5 * f(b);\
\
  \cf2 return\cf0  h*s;\
\}\
\pard\pardeftab720\ri-6

\f1\b \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
-----------------------------------------------------------------------------------------\
\pard\pardeftab720\ri-6

\f2\b0 \cf2 \uc0\u1055 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1072  cpi.c\
\
#include\cf0  \cf3 "mpi.h"\
\cf2 #include\cf0  \cf3 <stdio.h>\
\cf2 #include\cf0  \cf3 <math.h>\
\
\cf2 double\cf0  f( \cf2 double\cf0  );\
\cf2 double\cf0  f( \cf2 double\cf0  a )\
\{\
    \cf2 return\cf0  (4.0 / (1.0 + a*a));\
\}\
\cf2 int\cf0  main( \cf2 int\cf0  argc, \cf2 char\cf0  *argv[])\
\{\
    \cf2 int\cf0  done = 0, n, myid, numprocs, i;\
    \cf2 double\cf0  PI25DT = 3.141592653589793238462643;\
    \cf2 double\cf0  mypi, pi, h, sum, x;\
    \cf2 double\cf0  startwtime = 0.0, endwtime;\
    \cf2 int\cf0   namelen;\
    \cf2 char\cf0  processor_name[MPI_MAX_PROCESSOR_NAME];\
\
    MPI_Init(&argc,&argv);\
    MPI_Comm_size(MPI_COMM_WORLD,&numprocs);\
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);\
    MPI_Get_processor_name(processor_name,&namelen);\
\
    fprintf(stderr,\cf3 "Process %d on %s\\n"\cf0 ,\
	    myid, processor_name);\
\
    n = 0;\
    \cf2 while\cf0  (!done)\
    \{\
        \cf2 if\cf0  (myid == 0)\
        \{\
	    \cf2 if\cf0  (n==0) n=100; \cf2 else\cf0  n=0;\
	    startwtime = MPI_Wtime();\
        \}\
        MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);\
        \cf2 if\cf0  (n == 0)\
            done = 1;\
        \cf2 else\
\pard\pardeftab720\ri-6
\cf0         \{\
            h   = 1.0 / (\cf2 double\cf0 ) n;\
            sum = 0.0;\
            \cf2 for\cf0  (i = myid + 1; i <= n; i += numprocs)\
            \{\
                x = h * ((\cf2 double\cf0 )i - 0.5);\
                sum += f(x);\
            \}\
            mypi = h * sum;\
            MPI_Reduce(&mypi, &pi, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\
            \cf2 if\cf0  (myid == 0)\
	    \{\
                printf(\cf3 "pi is approximately %.16f, Error is %.16f\\n"\cf0 ,\
                       pi, fabs(pi - PI25DT));\
		endwtime = MPI_Wtime();\
		printf(\cf3 "wall clock time = %f\\n"\cf0 ,\
		       endwtime-startwtime);	       \
	    \}\
        \}\
    \}\
    MPI_Finalize();\
    \cf2 return\cf0  0;\
\}\
\pard\pardeftab720\ri-6

\f1\b \cf0 \
}